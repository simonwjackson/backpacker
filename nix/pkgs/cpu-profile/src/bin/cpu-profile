#!/usr/bin/env bash

# Function to get current governor
get_current_governor() {
  cpupower frequency-info --policy | grep -oP 'The governor "\K[^"]+'
}

# Function to get available governors
get_governors() {
  local governors_str
  governors_str=$(cpupower frequency-info --governors | grep -oP 'governors: \K.*')
  mapfile -t governors <<<"$(echo "$governors_str" | tr ' ' '\n')"
  echo "${governors[@]}"
}

# Function to set governor
set_governor() {
  local governor=$1
  echo "${governor}"
  cpupower frequency-set -g "${governor}" >/dev/null
}

# Function to cycle through governors
cycle_governors() {
  local current_governor=$(get_current_governor)
  local governors=($(get_governors))
  local next_governor_index

  for i in "${!governors[@]}"; do
    if [[ "${governors[i]}" == "$current_governor" ]]; then
      next_governor_index=$((i + 1))
      break
    fi
  done

  # If the current governor is the last in the list, wrap around to the first
  if [[ $next_governor_index -ge ${#governors[@]} ]]; then
    next_governor_index=0
  fi

  set_governor "${governors[next_governor_index]}"
}

# Main script logic
main() {
  local subcommand=$1
  case "$subcommand" in
  set)
    if [[ $# -ne 2 ]]; then
      echo "Usage: $0 set <governor>"
      exit 1
    fi
    local requested_governor=$2
    local governors=($(get_governors))

    if [[ " ${governors[*]} " =~ $requested_governor ]]; then
      set_governor "$requested_governor"
    else
      echo "Invalid governor: $requested_governor. Available governors are: ${governors[*]}"
      exit 1
    fi
    ;;
  cycle)
    cycle_governors
    ;;
  get)
    local current_governor=$(get_current_governor)
    echo "$current_governor"
    ;;
  *)
    echo "Usage: $0 <command>"
    echo "Commands:"
    echo "  set <governor>  - Sets the CPU governor"
    echo "  cycle           - Cycles through the available CPU governors"
    echo "  get             - Displays the current CPU governor"
    exit 1
    ;;
  esac
}

# Run main with all script arguments
main "$@"
