{
  config,
  pkgs,
  lib,
  ...
}: let
  cfg = config.programs.work-mode;
  package = pkgs.work-mode;
in {
  options.programs.work-mode = {
    enable = lib.mkEnableOption "work-mode";
  };

  config = lib.mkIf cfg.enable {
    gtk = {
      enable = true;
      # iconTheme = {
      #   name = "xfce4-icon-theme";
      #   package = pkgs.xfce.xfce4-icon-theme;
      # };
      theme = {
        name = "matcha-dark-sea";
        package = pkgs.matcha-gtk-theme;
      };
      gtk3.extraConfig = {
        Settings = ''
          gtk-application-prefer-dark-theme=1
        '';
      };
      gtk4.extraConfig = {
        Settings = ''
          gtk-application-prefer-dark-theme=1
        '';
      };
    };

    xsession = {
      enable = true;
      scriptPath = ".hm-xsession";
      # initExtra = ''
      #   # xrdb -merge ~/.Xresources
      #   # /home/simonwjackson/layout.sh &
      #   # virtual-term start &
      #   # /home/simonwjackson/.nix-profile/bin/virtual-term
      # '';
      windowManager.command = lib.mkForce ''
        exec ${pkgs.herbstluftwm}/bin/herbstluftwm --locked
        # exec $(while true; do sleep 1; done)
        # exec ${pkgs.kitty}/bin/kitty
        # ${pkgs.openbox}/bin/openbox &
        # exec ${pkgs.xfce.xfwm4}/bin/xfwm4
        # exec ${pkgs.bspwm}/bin/bspwm -c /home/simonwjackson/bspwmrc
        # exec /home/simonwjackson/toggle-wm
      '';
    };

    # home.file."toggle-wm" = {
    #   executable = true;
    #   text = ''
    #     #!/usr/bin/env bash
    #
    #     # while true; do
    #           # Get the current window manager
    #           current_wm=$(${pkgs.wmctrl}/bin/wmctrl -m | grep Name | awk '{print $2}')
    #           current_pid=$(${pkgs.wmctrl}/bin/wmctrl -m | grep PID | awk '{print $2}')
    #
    #           kill -9 $current_pid
    #           sleep 1
    #           # Swit to the other window manager
    #           if [[ $current_wm == "bspwm" ]]; then
    #             ${pkgs.xfce.xfwm4}/bin/xfwm4
    #           else
    #             ${pkgs.bspwm}/bin/bspwm -c /home/simonwjackson/bspwmrc
    #           fi
    #     # done
    #   '';
    # };

    xsession.windowManager.herbstluftwm = let
      max-toggle = "${pkgs.herbstluftwm-scripts}/bin/herb-max-toggle";
      padding = "25";
    in {
      enable = true;
      settings = {
        auto_detect_monitors = true;
        auto_detect_panels = true;
        default_frame_layout = "max";
        focus_follows_mouse = 1;
        # frame_bg_normal_color = "#000000";
        # frame_border_active_color = "#555555";
        # frame_border_inner_color = "#FF00FF";
        # frame_border_inner_width = 0;
        # frame_border_normal_color = "#333333";
        frame_border_width = 0;
        frame_gap = 0;
        gapless_grid = false;
        show_frame_decorations = "if_empty";
        # smart_window_surroundings = false;
        # window_border_active_color = "#000000";
        # window_border_width = 0;
      };
      rules = [
        "windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' focus=on pseudotile=on"
        "windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off"
        # "class~='(Steam|steam)' tag=gaming floating=on"
        # "tag=gaming floating=on pseudotile=off"
      ];
      # tags = ["dev" "misc" "gaming"];
      # focus padding mode
      # herbstclient pad 0 200 500 200 500
      extraConfig = ''
        herbstclient mousebind Mod4-Button1 move
        herbstclient mousebind Mod4-Button2 call attr clients.focus.floating toggle
        herbstclient mousebind Mod4-Button3 resize

        herbstclient detect_monitors
        herbstclient set window_gap ${padding}
        herbstclient pad 0 40 0 -${padding} 0

        # herbstclient use dev
        # herbstclient set_layout max
        # herbstclient load "(split horizontal:0.3803:1 (clients horizontal:0 0xe00026) (clients horizontal:0 0xc0000e))"
        # firefox &
        # sleep 1
        # herbstclient focus right
        # sleep 0.5
        # kitty --class=main-term &
        # sleep 0.5
        # ${max-toggle}

        # herbstclient rule focus=on
      '';
    };

    services.sxhkd = {
      enable = true;
      keybindings = let
        max-toggle = "${pkgs.herbstluftwm-scripts}/bin/herb-max-toggle";
        popup = "${pkgs.herbstluftwm-scripts}/bin/herb-popup";
        kitty = "${pkgs.kitty}/bin/kitty";
        term-popup = "${popup} ${kitty} --";
        hc = "${pkgs.herbstluftwm}/bin/herbstclient";
        brightnessctl = "${pkgs.brightnessctl}/bin/brightnessctl";
      in {
        "super + space" = ''
          ${term-popup} nmtui
        '';
        "super + ctrl + space" = ''
          ${max-toggle}
        '';
        "super + {_, shift} + Tab" = ''
          ${hc} cycle_all {+,-}1
        '';
        "super + Return" = ''
          ${kitty}
        '';
        "XF86Audio{Raise,Lower}Volume" = ''
          ${pkgs.pamixer}/bin/pamixer --{increase,decrease} 5
        '';
        "super + w" = ''
          ${pkgs.wmctrl}/bin/wmctrl -xa $BROWSER || $BROWSER
        '';
        "{XF86MonBrightnessDown,XF86MonBrightnessUp}" = ''
          ${brightnessctl} --device='*' --exponent set 5%{-,+}
        '';
        "super + {XF86MonBrightnessDown,XF86MonBrightnessUp}" = ''
          ${brightnessctl} --device='*' set {1,100}%
        '';
        "super + {_,shift} + {h,j,k,l}" = ''
          ${hc} {focus,shift} {left,down,up,right}
        '';
        "super + ctrl + {h,j,k,l}" = ''
          ${hc} split {left,bottom,top,right} 0.382
        '';
        "super + {4,5,6}" = ''
          ${hc} use {dev,misc,gaming}
        '';
        "super + r" = ''
          ${hc} remove
        '';
      };
    };

    fonts.fontconfig.enable = true;
    home.packages = [
      pkgs."material-icons"
      (pkgs.nerdfonts.override {
        fonts = [
          "Noto"
          "BitstreamVeraSansMono"
          # "Droid"
          "Iosevka"
          "FantasqueSansMono"
          "DroidSansMono"
          "Terminus"
        ];
      })
    ];

    services.polybar = {
      enable = true;
      # package = inputs.nixpkgs-unstable.polybar.override {
      #   alsaSupport = true;
      #   pulseSupport = true;
      # };
      script = "polybar top &";
      settings = let
        icons = {
          vpn = {
            active = "";
            inactive = "";
          };
          rotate = "";
          cpu = "";
          memory = "";
          date = "";
          microphone = "";
          microphone-muted = "";
          microphone-disconnected = "";
          wifi = "";
          up = "";
          down = "";
          ethernet = "";
          envelope = "";
        };

        background = "#99000000";
        background-alt = "#99000000";

        foreground = "#ffdddddd";
        foreground-alt = "#ffdddddd";

        primary = "#ff006633";
        secondary = "#ff003333";
        alert = "#ff330000";
        fonts = {
          font = [
            "DroidSansM Nerd Font Mono:style=Regular:pixelsize=12:antialias=true;0"
            # "NotoSansM Nerd Font Mono:antialias=true"
          ];
        };
      in {
        "bar/top" =
          fonts
          // {
            monitor = "\${env:MONITOR:eDP-1}";
            width = "100%";
            height = 20;
            offset-y = 26;
            # offset-x = 25;
            radius = 0;
            module-margin = 1;
            modules = {
              left = "empty-module tailscale xwindow";
              center = "time";
              right = "rotate battery wlan empty-module";
            };
            # offset.y = 30;
          };

        "module/empty-module" = {
          type = "custom/text";
          content = " ";
          width = 25;
        };

        "module/xwindow" = {
          type = "internal/xwindow";
          label = "%title:0:30:...%";
        };

        "module/wlan" = {
          type = "internal/network";
          interval = "3.0";
          interface.type = "wireless";

          format-connected = "<ramp-signal> <label-connected>";
          label-connected = "%essid%";

          ramp = {
            signal = [
              "󰤯"
              "󰤟"
              "󰤢"
              "󰤥"
              "󰤨"
            ];
            signal-foreground = foreground-alt;
          };
        };

        "module/battery" = {
          type = "internal/battery";
          battery = "BAT1";
          adapter = "ADP1";
          full-at = "98";

          format.charging = "<ramp-capacity> <label-discharging>";
          format.discharging = "<ramp-capacity> <label-discharging>";
          format.full-prefix = " ";
          format-full-prefix-foreground = foreground;

          ramp.capacity = ["" "" ""];
          ramp-capacity-foreground = foreground;
        };

        # "module/notmuch" = {
        #   type = "custom/script";
        #   exec = "echo -n '${icons.envelope} '; ${pkgs.notmuch}/bin/notmuch search tag:unread | wc -l";
        #   tail = true;
        #   interval = 10;
        #   click-left = "${pkgs.astroid}/bin/astroid";
        # };

        "module/tailscale" = {
          type = "custom/script";
          exec =
            # TODO: Move to own script file
            let
              curl = "${pkgs.curl}/bin/curl";
              jq = "${pkgs.jq}/bin/jq";
            in
              (pkgs.writeShellScriptBin "tailscale-check" ''
                ICON_ACTIVE="${icons.vpn.active}"
                ICON_INACTIVE="${icons.vpn.inactive}"

                status=$(${curl} --silent --fail --unix-socket /var/run/tailscale/tailscaled.sock http://local-tailscaled.sock/localapi/v0/status)

                # bail out if curl had non-zero exit code
                if [ $? != 0 ]; then
                    exit 0
                fi

                # check if it's stopped (down)
                if [ "$(echo $status | ${jq} --raw-output .BackendState)" = "Stopped" ]; then
                    echo "$ICON_INACTIVE VPN down"
                    exit 0
                fi

                # if an exit node is active, show its hostname
                exit_node_hostname="$(echo $status | ${jq} --raw-output '.Peer[] | select(.ExitNode) | .HostName')"
                if [ -n "$exit_node_hostname" ]; then
                    echo "$ICON_ACTIVE $exit_node_hostname"
                else
                    echo "$ICON_ACTIVE"
                fi
              '')
              + "/bin/tailscale-check";
          tail = true;
          interval = 10;
          # click-left = "${pkgs.astroid}/bin/astroid";
        };

        "module/rotate" = {
          type = "custom/text";
          content = "${icons.rotate}";
          click-left = let
            xrandr = "${pkgs.xorg.xrandr}/bin/xrandr";
            xinput = "${pkgs.xorg.xinput}/bin/xinput";
            grep = "${pkgs.gnugrep}/bin/grep";
            awk = "${pkgs.gawk}/bin/awk";
          in
            (pkgs.writeShellScriptBin "invert-screen" ''
              rotation=$(${xrandr} --query --verbose | ${grep} 'eDP-1 connected primary' | ${awk} '{print $6}')
              screen="eDP-1"
              device="GXTP7936:00 27C6:0123"

              # Rotate screen and touchscreen input based on the current state
              if [ "$rotation" == "inverted" ]; then
                ${xrandr} --output "$screen" --rotate normal
                ${xinput} set-prop "$device" 'Coordinate Transformation Matrix' 1 0 0 0 1 0 0 0 1
              else
                ${xrandr} --output "$screen" --rotate inverted
                ${xinput} set-prop "$device" --type=float "Coordinate Transformation Matrix" -1 0 1 0 -1 1 0 0 1
              fi

              # Counter-clockwise
              # xinput set-prop "GXTP7936:00 27C6:0123" --type=float "Coordinate Transformation Matrix" 0 -1 1 1 0 0 0 0 1

              # Clockwise
              # xinput set-prop "GXTP7936:00 27C6:0123" --type=float "Coordinate Transformation Matrix" 0 1 0 -1 0 1 0 0 1
            '')
            + "/bin/invert-screen";
          tail = true;
          interval = 10;
          # click-left = "${pkgs.astroid}/bin/astroid";
        };

        # "module/headsetswitch" = let
        #   pactl = "${pkgs.pulseaudioLight}/bin/pactl";
        #   grep = "${pkgs.gnugrep}/bin/grep";
        #   sed = "${pkgs.gnused}/bin/sed";
        # in {
        #   type = "custom/script";
        #   format-underline = "#0628FF";
        #   label = "%output%";
        #   exec = __concatStringsSep " " [
        #     "${pactl} info"
        #     "| ${grep} 'Default Sink'"
        #     "| ${sed} 's/.*analog-stereo//'"
        #     "| ${sed} 's/.*analog-stereo//'"
        #     "| ${sed} 's/.*auto_null/${icons.microphone-disconnected}/'"
        #     "| ${sed} 's/.*hdmi-stereo-extra.*/HDMI/'"
        #     "| ${sed} 's/.*headset_head_unit/${icons.microphone}/'"
        #     "| ${sed} 's/.*a2dp_sink/${icons.microphone-muted}/'"
        #     "| ${sed} 's/.*hdmi-stereo/HDMI/'"
        #   ];
        #
        #   tail = true;
        #   interval = 2;
        #   click-left = "${pactl} set-card-profile bluez_card.2C_41_A1_83_C7_98 a2dp_sink";
        #   click-right = "${pactl} set-card-profile bluez_card.2C_41_A1_83_C7_98 headset_head_unit";
        # };

        "module/time" = {
          type = "internal/date";
          interval = "5";

          time = "%I:%M";

          format-underline = "#2406E8";
          label = "%time%";
        };
      };
    };
  };
}
